'''  

You are working on an authentication system and there is a set of rules the users have to follow when picking a new password:

1. It has to be at least 16 characters long.
2. The password cannot contain the word "password". This rule is not case-sensitive.
3. The same character cannot be used more than 4 times. This rule is case-sensitive, "a" and "A" are different characters.
4. The password has to contain at least one uppercase and one lowercase letter.
5. The password has to contain at least one of the following special characters "*","#","@".

Write a function that takes in a password and returns a collection of any rule numbers that are not met.

password_1 = "Strongpwd9999#abc"             ==> []
password_2 = "Aess10#"                       ==> [1]
password_3 = "Password@"                     ==> [1,2]
password_4 = "#PassWord011111112222223x"     ==> [2,3]
password_5 = "PASSWORDz#1111111"             ==> [2,3]
password_6 = "aaaapassword$$"                ==> [1,2,3,4,5]
password_7 = "LESS10#"                       ==> [1,4]
password_8 = "SsSSSt#passWord"               ==> [1,2]
password_9 = "SsSSSt#passWordpassword"       ==> [2,3]
password_10 = "aZ*"                          ==> [1]


All test cases:

validate(password_1) ==> []
validate(password_2) ==> [1]
validate(password_3) ==> [1,2]
validate(password_4) ==> [2,3]
validate(password_5) ==> [2,3]
validate(password_6) ==> [1,2,3,4,5]
validate(password_7) ==> [1,4]
validate(password_8) ==> [1,2]
validate(password_9) ==> [2,3]
validate(password_10) ==> [1]


Complexity variables:

N = length of the password


'''

password_1 = "Strongpwd9999#abc"
password_2 = "Aess10#"
password_3 = "Password@"
password_4 = "#PassWord011111112222223x"
password_5 = "PASSWORDz#1111111"
password_6 = "aaaapassword$$"
password_7 = "LESS10#"
password_8 = "SsSSSt#passWord"
password_9 = "SsSSSt#passWordpassword"
password_10 = "aZ*"

from collections import defaultdict

def validatePassword(password):
    ans = set()
    
    password_map = defaultdict(int)
    
    for character in password:
        password_map[character] += 1 
    
    # Rule 5
    if "#" in password_map.keys():
        pass
    elif "@" in password_map.keys():
        pass
    elif "*" in password_map.keys():
        pass
    else:
        ans.add(5)
    
     # Rule 1 
    if len(password) < 16:
            ans.add(1)
    
     # Rule 3
    for key,value in password_map.items():
        if value > 4:
            if 3 not in ans:
                ans.add(3)
                
    #  Rule 4
    count = [0,0]
    for key in password_map.keys():
        if key.isupper():
            count[0] += 1
        if key.islower():
            count[1] += 1
    
    if count[0] == 0 or count[1] == 0:
        ans.add(4)
            
    
    #Rule 2
    
    if "password" in password.lower():
        ans.add(2)
                
        
            
            
    
    print(ans)
    
    return ans
    
validatePassword(password_1)
validatePassword(password_2)
validatePassword(password_3)
validatePassword(password_4)
validatePassword(password_5)
validatePassword(password_6)
validatePassword(password_7)
validatePassword(password_8)
validatePassword(password_9)
validatePassword(password_10)

    
#  ans = []
#  password_map = defaultdict(int)
#  for character in password_string: password_map[character] += 1
#  if len(password_map) < 16 : ans.append(1)
#  for x in "password":
#   if x in password_map:
#   else:
#    return false

# for key,value in password_map.items():
    # if value > 4:
    #    ans.append(3)
#     if key.upper():
 #   else:
            
#     if key == "*" or "#" or "@":
#     else: 
#           ans.append(5)
#  if password.includes(password_word.lower()): ans.append(2)
# 
